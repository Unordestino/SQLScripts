CREATE PROCEDURE MonitoraLock
    @time INT -- Parâmetro de entrada
AS
BEGIN

IF OBJECT_ID('tempdb..#TempBlockingReport') IS NOT NULL
BEGIN
    DROP TABLE #TempBlockingReport;
END

SELECT  ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS ID ,
	'Waiter_Blocking_Report' AS [Information],
	-- blocked
	es.session_id AS blocked_spid,
	es.[status] AS [blocked_spid_status],
	ot.task_state AS [blocked_task_status],
	owt.wait_type AS blocked_spid_wait_type,
	COALESCE(owt.wait_duration_ms, DATEDIFF(ms, es.last_request_start_time, GETDATE())) AS blocked_spid_wait_time_ms,
	--er.total_elapsed_time AS blocked_elapsed_time_ms,
	/* 
		Check sys.dm_os_waiting_tasks for Exchange wait types in http://technet.microsoft.com/en-us/library/ms188743.aspx.
		- Wait Resource e_waitPipeNewRow in CXPACKET waits – Producer waiting on consumer for a packet to fill.
		- Wait Resource e_waitPipeGetRow in CXPACKET waits – Consumer waiting on producer to fill a packet.
	*/
	owt.resource_description AS blocked_spid_res_desc,
	owt.[objid] AS blocked_objectid,
	owt.pageid AS blocked_pageid,
	CASE WHEN owt.pageid = 1 OR owt.pageid % 8088 = 0 THEN 'Is_PFS_Page'
		WHEN owt.pageid = 2 OR owt.pageid % 511232 = 0 THEN 'Is_GAM_Page'
		WHEN owt.pageid = 3 OR (owt.pageid - 1) % 511232 = 0 THEN 'Is_SGAM_Page'
		WHEN owt.pageid IS NULL THEN NULL
		ELSE 'Is_not_PFS_GAM_SGAM_page' END AS blocked_spid_res_type,
	(SELECT qt.text AS [text()] 
		FROM sys.dm_exec_sql_text(COALESCE(er.sql_handle, ec.most_recent_sql_handle)) AS qt 
		FOR XML PATH(''), TYPE) AS [blocked_batch],
	(SELECT SUBSTRING(qt2.text, 
		1+(CASE WHEN er.statement_start_offset = 0 THEN 0 ELSE er.statement_start_offset/2 END),
		1+(CASE WHEN er.statement_end_offset = -1 THEN DATALENGTH(qt2.text) ELSE er.statement_end_offset/2 END - (CASE WHEN er.statement_start_offset = 0 THEN 0 ELSE er.statement_start_offset/2 END))) AS [text()]
		FROM sys.dm_exec_sql_text(COALESCE(er.sql_handle, ec.most_recent_sql_handle)) AS qt2 
		FOR XML PATH(''), TYPE) AS [blocked_statement],
	es.last_request_start_time AS blocked_last_start,
	LEFT (CASE COALESCE(es.transaction_isolation_level, er.transaction_isolation_level)
		WHEN 0 THEN '0-Unspecified' 
		WHEN 1 THEN '1-ReadUncommitted(NOLOCK)' 
		WHEN 2 THEN '2-ReadCommitted' 
		WHEN 3 THEN '3-RepeatableRead' 
		WHEN 4 THEN '4-Serializable' 
		WHEN 5 THEN '5-Snapshot'
		ELSE CONVERT (VARCHAR(30), COALESCE(es.transaction_isolation_level, er.transaction_isolation_level)) + '-UNKNOWN' 
    END, 30) AS blocked_tran_isolation_level,

	-- blocker
	er.blocking_session_id As blocker_spid,
    CASE 
        -- session has an active request, is blocked, but is blocking others or session is idle but has an open tran and is blocking others
        WHEN (er2.session_id IS NULL OR owt.blocking_session_id IS NULL) AND (er.blocking_session_id = 0 OR er.session_id IS NULL) THEN 1
        -- session is either not blocking someone, or is blocking someone but is blocked by another party
        ELSE 0
    END AS is_head_blocker,
	(SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
		qt2.text,
		NCHAR(1),N'?'),NCHAR(2),N'?'),NCHAR(3),N'?'),NCHAR(4),N'?'),NCHAR(5),N'?'),NCHAR(6),N'?'),NCHAR(7),N'?'),NCHAR(8),N'?'),NCHAR(11),N'?'),NCHAR(12),N'?'),NCHAR(14),N'?'),NCHAR(15),N'?'),NCHAR(16),N'?'),NCHAR(17),N'?'),NCHAR(18),N'?'),NCHAR(19),N'?'),NCHAR(20),N'?'),NCHAR(21),N'?'),NCHAR(22),N'?'),NCHAR(23),N'?'),NCHAR(24),N'?'),NCHAR(25),N'?'),NCHAR(26),N'?'),NCHAR(27),N'?'),NCHAR(28),N'?'),NCHAR(29),N'?'),NCHAR(30),N'?'),NCHAR(31),N'?') 
		AS [text()]
		FROM sys.dm_exec_sql_text(COALESCE(er2.sql_handle, ec2.most_recent_sql_handle)) AS qt2 
		FOR XML PATH(''), TYPE) AS [blocker_batch],
	(SELECT REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(
		SUBSTRING(qt2.text, 
		1+(CASE WHEN er2.statement_start_offset = 0 THEN 0 ELSE er2.statement_start_offset/2 END),
		1+(CASE WHEN er2.statement_end_offset = -1 THEN DATALENGTH(qt2.text) ELSE er2.statement_end_offset/2 END - (CASE WHEN er2.statement_start_offset = 0 THEN 0 ELSE er2.statement_start_offset/2 END))),
		NCHAR(1),N'?'),NCHAR(2),N'?'),NCHAR(3),N'?'),NCHAR(4),N'?'),NCHAR(5),N'?'),NCHAR(6),N'?'),NCHAR(7),N'?'),NCHAR(8),N'?'),NCHAR(11),N'?'),NCHAR(12),N'?'),NCHAR(14),N'?'),NCHAR(15),N'?'),NCHAR(16),N'?'),NCHAR(17),N'?'),NCHAR(18),N'?'),NCHAR(19),N'?'),NCHAR(20),N'?'),NCHAR(21),N'?'),NCHAR(22),N'?'),NCHAR(23),N'?'),NCHAR(24),N'?'),NCHAR(25),N'?'),NCHAR(26),N'?'),NCHAR(27),N'?'),NCHAR(28),N'?'),NCHAR(29),N'?'),NCHAR(30),N'?'),NCHAR(31),N'?') 
		AS [text()]
		FROM sys.dm_exec_sql_text(COALESCE(er2.sql_handle, ec2.most_recent_sql_handle)) AS qt2 
		FOR XML PATH(''), TYPE) AS [blocker_statement],
	es2.last_request_start_time AS blocker_last_start,
	LEFT (CASE COALESCE(er2.transaction_isolation_level, es.transaction_isolation_level)
		WHEN 0 THEN '0-Unspecified' 
		WHEN 1 THEN '1-ReadUncommitted(NOLOCK)' 
		WHEN 2 THEN '2-ReadCommitted' 
		WHEN 3 THEN '3-RepeatableRead' 
		WHEN 4 THEN '4-Serializable' 
		WHEN 5 THEN '5-Snapshot' 
		ELSE CONVERT (VARCHAR(30), COALESCE(er2.transaction_isolation_level, es.transaction_isolation_level)) + '-UNKNOWN' 
    END, 30) AS blocker_tran_isolation_level,

	-- blocked - other data
	DB_NAME(er.database_id) AS blocked_database, 
	es.[host_name] AS blocked_host,
	es.[program_name] AS blocked_program, 
	es.login_name AS blocked_login,
	CASE WHEN es.session_id = -2 THEN 'Orphaned_distributed_tran' 
		WHEN es.session_id = -3 THEN 'Defered_recovery_tran' 
		WHEN es.session_id = -4 THEN 'Unknown_tran' ELSE NULL END AS blocked_session_comment,
	es.is_user_process AS [blocked_is_user_process],

	-- blocker - other data
	DB_NAME(er2.database_id) AS blocker_database,
	es2.[host_name] AS blocker_host,
	es2.[program_name] AS blocker_program,	
	es2.login_name AS blocker_login,
	CASE WHEN es2.session_id = -2 THEN 'Orphaned_distributed_tran' 
		WHEN es2.session_id = -3 THEN 'Defered_recovery_tran' 
		WHEN es2.session_id = -4 THEN 'Unknown_tran' ELSE NULL END AS blocker_session_comment,
	es2.is_user_process AS [blocker_is_user_process]
INTO #TempBlockingReport -- Cria a tabela temporária
FROM sys.dm_exec_sessions (NOLOCK) es
LEFT OUTER JOIN sys.dm_exec_requests (NOLOCK) er ON es.session_id = er.session_id
LEFT OUTER JOIN sys.dm_exec_connections (NOLOCK) ec ON es.session_id = ec.session_id
LEFT OUTER JOIN sys.dm_os_tasks (NOLOCK) ot ON er.session_id = ot.session_id AND er.request_id = ot.request_id
LEFT OUTER JOIN sys.dm_exec_sessions (NOLOCK) es2 ON er.blocking_session_id = es2.session_id
LEFT OUTER JOIN sys.dm_exec_requests (NOLOCK) er2 ON es2.session_id = er2.session_id
LEFT OUTER JOIN sys.dm_exec_connections (NOLOCK) ec2 ON es2.session_id = ec2.session_id
LEFT OUTER JOIN 
(
    -- In some cases (e.g. parallel queries, also waiting for a worker), one thread can be flagged as 
    -- waiting for several different threads.  This will cause that thread to show up in multiple rows 
    -- in our grid, which we don't want.  Use ROW_NUMBER to select the longest wait for each thread, 
    -- and use it as representative of the other wait relationships this thread is involved in. 
    SELECT waiting_task_address, session_id, exec_context_id, wait_duration_ms, 
		wait_type, resource_address, blocking_task_address, blocking_session_id, 
		blocking_exec_context_id, resource_description,
		CASE WHEN [wait_type] LIKE 'PAGE%' AND [resource_description] LIKE '%:%' THEN CAST(RIGHT([resource_description], LEN([resource_description]) - CHARINDEX(':', [resource_description], LEN([resource_description])-CHARINDEX(':', REVERSE([resource_description])))) AS int)
			WHEN [wait_type] LIKE 'LCK%' AND [resource_description] LIKE '%pageid%' AND ISNUMERIC(RIGHT(LEFT([resource_description],CHARINDEX('dbid=', [resource_description], CHARINDEX('pageid=', [resource_description])+6)-1),CHARINDEX('=',REVERSE(RTRIM(LEFT([resource_description],CHARINDEX('dbid=', [resource_description], CHARINDEX('pageid=', [resource_description])+6)-1)))))) = 1 THEN CAST(RIGHT(LEFT([resource_description],CHARINDEX('dbid=', [resource_description], CHARINDEX('pageid=', [resource_description])+6)-1),CHARINDEX('=',REVERSE(RTRIM(LEFT([resource_description],CHARINDEX('dbid=', [resource_description], CHARINDEX('pageid=', [resource_description])+6)-1))))) AS bigint)
			ELSE NULL END AS pageid,
		CASE WHEN [wait_type] LIKE 'LCK%' AND [resource_description] LIKE '%associatedObjectId%' AND ISNUMERIC(RIGHT([resource_description],CHARINDEX('=', REVERSE([resource_description]))-1)) = 1 THEN CAST(RIGHT([resource_description],CHARINDEX('=', REVERSE([resource_description]))-1) AS bigint)
			ELSE NULL END AS [objid],
		ROW_NUMBER() OVER (PARTITION BY waiting_task_address ORDER BY wait_duration_ms DESC) AS row_num
    FROM sys.dm_os_waiting_tasks (NOLOCK)
) owt ON ot.task_address = owt.waiting_task_address AND owt.row_num = 1
--OUTER APPLY sys.dm_exec_sql_text(er.sql_handle) est
--OUTER APPLY sys.dm_exec_query_plan(er.plan_handle) eqp
WHERE es.session_id <> @@SPID AND es.is_user_process = 1 
	AND ((owt.wait_duration_ms/1000 > 180) OR (er.total_elapsed_time/1000) > @time OR er.total_elapsed_time IS NULL) --Only report blocks > 180 Seconds plus head blocker
	AND (es.session_id IN (SELECT er3.blocking_session_id FROM sys.dm_exec_requests (NOLOCK) er3) OR er.blocking_session_id IS NOT NULL OR er.blocking_session_id > 0)
ORDER BY blocked_spid, is_head_blocker DESC, blocked_spid_wait_time_ms DESC, blocker_spid;

--SELECT * FROM #TempBlockingReport WHERE blocked_task_status IS NOT NULL

IF (SELECT COUNT(*) FROM #TempBlockingReport WHERE blocked_task_status IS NOT NULL and blocked_spid_wait_type like 'LCK%') >= 1
BEGIN

--Limpa todos os waits que não são locks
DELETE FROM #TempBlockingReport 
WHERE NOT (
    blocker_spid > 0 
    OR blocked_spid IN (
        SELECT DISTINCT blocker_spid 
        FROM #TempBlockingReport 
        WHERE blocker_spid IS NOT NULL
    )
);

    -- Declarar variáveis necessárias
    DECLARE @ResultadoHTML NVARCHAR(MAX);
    DECLARE @ResultadoTemp NVARCHAR(MAX);
    DECLARE @ID INT, 
			@Information NVARCHAR(50),
			@blocked_database NVARCHAR(50),
			@blocked_spid INT, 
			@blocked_spid_status NVARCHAR(50), 
			@blocked_spid_wait_type NVARCHAR(255),
			@blocked_spid_wait_time_ms INT,
			@blocked_batch VARCHAR(MAX),
			@blocked_login NVARCHAR(255),
			@blocked_host NVARCHAR(255);


    -- Início do HTML
    SET @ResultadoHTML = N'<html>
    <head>
        <style type="text/css">
            table { border: outset 2.25pt; }
            thead { background: #C10A0A; }
            th { color: #fff; padding: 10px; }
            td { padding: 3.0pt 3.0pt 3.0pt 3.0pt; }
        </style>
    </head>
    <body>
        <img src="https://www.hostweb.com.br/wp-content/uploads/elementor/thumbs/logo-hostweb-01-p42fabr8umczbaiaqfqnvmeyfpr6eebo9leatlo39i.png" title="logo-hostweb-01" alt="logo-hostweb-01">
        <table border="1">
            <thead>
                <tr>
                    <th>Information</th>
					<th>blocked_database</th>
                    <th>blocked_spid</th>
                    <th>blocked_spid_status</th>
                    <th>blocked_spid_wait_type</th>
                    <th>blocked_spid_wait_time_seconds</th>
					<th>blocked_batch</th>
					<th>blocked_login</th>
					<th>blocked_host</th>
                </tr>
            </thead>
            <tbody>';

	-- Criar variáveis para armazenar os dados do cursor
	DECLARE @ID2 INT
	-- Declarar o cursor para selecionar dados da tabela BlockingReport
	DECLARE CursorProdutos CURSOR FOR
	SELECT ID
	FROM #TempBlockingReport;

	-- Abrir o cursor
	OPEN CursorProdutos;
	-- Buscar o primeiro registro
	FETCH NEXT FROM CursorProdutos INTO @ID2;

	WHILE @@FETCH_STATUS = 0
BEGIN
    
	        -- Obter os dados do registro atual
        SELECT @ID = CAST (ID AS varchar(50)),
               @Information =         
			CASE 
            WHEN blocked_spid IN (SELECT DISTINCT blocker_spid FROM #TempBlockingReport WHERE blocker_spid IS NOT NULL) and blocker_spid is null THEN 'RAIZ'
            WHEN blocker_spid > 0 THEN 'BLOCK'
            ELSE 'N/A'
        END,
			   @blocked_database = blocked_database,
               @blocked_spid = blocked_spid,   -- Converte para string no formato ISO
               @blocked_spid_status = blocked_spid_status,
               @blocked_spid_wait_type = blocked_spid_wait_type,
			   @blocked_spid_wait_time_ms = blocked_spid_wait_time_ms / 1000 ,
			   @blocked_batch = cast( blocked_batch AS VARCHAR(MAX)),
			   @blocked_login = blocked_login,
			   @blocked_host = blocked_host
        FROM #TempBlockingReport
        WHERE ID  = @ID2
	
		        -- Formatar a linha em HTML
        SET @ResultadoTemp = N'<tr>
            <td>' + ISNULL(@Information, 'N/A') + N'</td>
            <td>' + ISNULL(@blocked_database, 'N/A') + N'</td>
            <td>' + ISNULL(CAST(@blocked_spid AS NVARCHAR(50)), 'N/A') + N'</td>
            <td>' + ISNULL(@blocked_spid_status, 'N/A') + N'</td>
			<td>' + ISNULL(@blocked_spid_wait_type, 'N/A') + N'</td>
            <td>' + ISNULL(CAST(@blocked_spid_wait_time_ms AS NVARCHAR(50)), 'N/A') + N'</td>
            <td>' + ISNULL(@blocked_batch, 'N/A') + N'</td>
			<td>' + ISNULL(@blocked_login, 'N/A') + N'</td>
			<td>' + ISNULL(@blocked_host, 'N/A') + N'</td>
        </tr>';

        -- Adicionar ao HTML final
        SET @ResultadoHTML += @ResultadoTemp;

    -- Buscar o próximo registro
    FETCH NEXT FROM CursorProdutos INTO @ID2;
END;

-- Fechar e desalocar o cursor
CLOSE CursorProdutos;
DEALLOCATE CursorProdutos;

    -- Finalizar o HTML
    SET @ResultadoHTML += N'</tbody></table>
    <p>Relatório de monitoramento de bloqueio, qualquer dúvida estamos à disposição.</p>
    </body></html>';

    -- Obter o e-mail do operador
    DECLARE @operator_email NVARCHAR(256);
    SELECT @operator_email = email_address
    FROM msdb.dbo.sysoperators
    WHERE name = 'TESTE';

    -- Enviar o e-mail com o resultado formatado
    EXEC msdb.dbo.sp_send_dbmail
         @profile_name = 'HOSTWEB',
         @recipients = @operator_email,
         @subject = 'Relatório de monitoramento de bloqueios',
         @body = @ResultadoHTML,
         @body_format = 'HTML';
END

END;

--select ID ,Information, blocked_database ,blocked_spid, blocked_spid_status, blocked_spid_wait_type, blocked_spid_wait_time_ms, CAST( blocked_batch AS VARCHAR(MAX)), blocked_login, blocked_host  from  #TempBlockingReport

